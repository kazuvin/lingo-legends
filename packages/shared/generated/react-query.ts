/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Lingo Legends API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

export type LexFileNum = (typeof LexFileNum)[keyof typeof LexFileNum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LexFileNum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
  NUMBER_12: 12,
  NUMBER_13: 13,
  NUMBER_14: 14,
  NUMBER_15: 15,
  NUMBER_16: 16,
  NUMBER_17: 17,
  NUMBER_18: 18,
  NUMBER_19: 19,
  NUMBER_20: 20,
  NUMBER_21: 21,
  NUMBER_22: 22,
  NUMBER_23: 23,
  NUMBER_24: 24,
  NUMBER_25: 25,
  NUMBER_26: 26,
  NUMBER_27: 27,
  NUMBER_28: 28,
  NUMBER_29: 29,
  NUMBER_30: 30,
  NUMBER_31: 31,
  NUMBER_32: 32,
  NUMBER_33: 33,
  NUMBER_34: 34,
  NUMBER_35: 35,
  NUMBER_36: 36,
  NUMBER_37: 37,
  NUMBER_38: 38,
  NUMBER_39: 39,
  NUMBER_40: 40,
  NUMBER_41: 41,
  NUMBER_42: 42,
  NUMBER_43: 43,
  NUMBER_44: 44,
} as const;

export type PointerSymbol = (typeof PointerSymbol)[keyof typeof PointerSymbol];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointerSymbol = {
  "@": "@",
  "@i": "@i",
  "~": "~",
  "~i": "~i",
  "#m": "#m",
  "#s": "#s",
  "#p": "#p",
  "%m": "%m",
  "%s": "%s",
  "%p": "%p",
  "=": "=",
  "+": "+",
  "!": "!",
  "&": "&",
  "<": "<",
  "*": "*",
  ">": ">",
  "^": "^",
  $: "$",
  ";c": ";c",
  ";r": ";r",
  ";u": ";u",
  "-c": "-c",
  "-r": "-r",
  "-u": "-u",
  "\\": "\\",
} as const;

export type PosCode = (typeof PosCode)[keyof typeof PosCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PosCode = {
  n: "n",
  v: "v",
  a: "a",
  s: "s",
  r: "r",
} as const;

export type Versions = (typeof Versions)[keyof typeof Versions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Versions = {
  v1: "v1",
} as const;

export interface Word {
  id: number;
  lemma: string;
  gloss: string;
  posCode: PosCode;
  lexFileNum: LexFileNum;
  relations: WordRelation[];
}

export interface WordRelation {
  id: number;
  lemma: string;
  pointerSymbol: PointerSymbol;
  sourceTarget: string;
}

export interface WordsResponse {
  words: Word[];
  count: number;
}

export type WordsGetWordsParams = {
  ids: string;
};

export type WordsGetRandomParams = {
  count?: string;
};

export const wordsGetWords = (
  params: WordsGetWordsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<WordsResponse>> => {
  return axios.get(`/words`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getWordsGetWordsQueryKey = (params?: WordsGetWordsParams) => {
  return [`/words`, ...(params ? [params] : [])] as const;
};

export const getWordsGetWordsQueryOptions = <
  TData = Awaited<ReturnType<typeof wordsGetWords>>,
  TError = AxiosError<unknown>,
>(
  params: WordsGetWordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetWords>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWordsGetWordsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof wordsGetWords>>> = ({
    signal,
  }) => wordsGetWords(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof wordsGetWords>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WordsGetWordsQueryResult = NonNullable<
  Awaited<ReturnType<typeof wordsGetWords>>
>;
export type WordsGetWordsQueryError = AxiosError<unknown>;

export function useWordsGetWords<
  TData = Awaited<ReturnType<typeof wordsGetWords>>,
  TError = AxiosError<unknown>,
>(
  params: WordsGetWordsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetWords>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof wordsGetWords>>,
          TError,
          Awaited<ReturnType<typeof wordsGetWords>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWordsGetWords<
  TData = Awaited<ReturnType<typeof wordsGetWords>>,
  TError = AxiosError<unknown>,
>(
  params: WordsGetWordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetWords>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof wordsGetWords>>,
          TError,
          Awaited<ReturnType<typeof wordsGetWords>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWordsGetWords<
  TData = Awaited<ReturnType<typeof wordsGetWords>>,
  TError = AxiosError<unknown>,
>(
  params: WordsGetWordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetWords>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useWordsGetWords<
  TData = Awaited<ReturnType<typeof wordsGetWords>>,
  TError = AxiosError<unknown>,
>(
  params: WordsGetWordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetWords>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWordsGetWordsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const wordsGetRandom = (
  params?: WordsGetRandomParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<WordsResponse>> => {
  return axios.get(`/words/random`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getWordsGetRandomQueryKey = (params?: WordsGetRandomParams) => {
  return [`/words/random`, ...(params ? [params] : [])] as const;
};

export const getWordsGetRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof wordsGetRandom>>,
  TError = AxiosError<unknown>,
>(
  params?: WordsGetRandomParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetRandom>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWordsGetRandomQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof wordsGetRandom>>> = ({
    signal,
  }) => wordsGetRandom(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof wordsGetRandom>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WordsGetRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof wordsGetRandom>>
>;
export type WordsGetRandomQueryError = AxiosError<unknown>;

export function useWordsGetRandom<
  TData = Awaited<ReturnType<typeof wordsGetRandom>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | WordsGetRandomParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetRandom>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof wordsGetRandom>>,
          TError,
          Awaited<ReturnType<typeof wordsGetRandom>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWordsGetRandom<
  TData = Awaited<ReturnType<typeof wordsGetRandom>>,
  TError = AxiosError<unknown>,
>(
  params?: WordsGetRandomParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetRandom>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof wordsGetRandom>>,
          TError,
          Awaited<ReturnType<typeof wordsGetRandom>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWordsGetRandom<
  TData = Awaited<ReturnType<typeof wordsGetRandom>>,
  TError = AxiosError<unknown>,
>(
  params?: WordsGetRandomParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetRandom>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useWordsGetRandom<
  TData = Awaited<ReturnType<typeof wordsGetRandom>>,
  TError = AxiosError<unknown>,
>(
  params?: WordsGetRandomParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof wordsGetRandom>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWordsGetRandomQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
