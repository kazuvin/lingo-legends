/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Lingo Legends API
 * OpenAPI spec version: v1
 */
import zod from "zod";

export const wordsGetWordsQueryParams = zod.object({
  ids: zod.string().optional(),
  random: zod.boolean().optional(),
  count: zod.number().optional(),
  pos: zod.enum(["n", "v", "a", "s", "r"]).optional(),
  lexFileNum: zod
    .union([
      zod.literal(0),
      zod.literal(1),
      zod.literal(2),
      zod.literal(3),
      zod.literal(4),
      zod.literal(5),
      zod.literal(6),
      zod.literal(7),
      zod.literal(8),
      zod.literal(9),
      zod.literal(10),
      zod.literal(11),
      zod.literal(12),
      zod.literal(13),
      zod.literal(14),
      zod.literal(15),
      zod.literal(16),
      zod.literal(17),
      zod.literal(18),
      zod.literal(19),
      zod.literal(20),
      zod.literal(21),
      zod.literal(22),
      zod.literal(23),
      zod.literal(24),
      zod.literal(25),
      zod.literal(26),
      zod.literal(27),
      zod.literal(28),
      zod.literal(29),
      zod.literal(30),
      zod.literal(31),
      zod.literal(32),
      zod.literal(33),
      zod.literal(34),
      zod.literal(35),
      zod.literal(36),
      zod.literal(37),
      zod.literal(38),
      zod.literal(39),
      zod.literal(40),
      zod.literal(41),
      zod.literal(42),
      zod.literal(43),
      zod.literal(44),
    ])
    .optional(),
  lang: zod.string().optional(),
  lemma: zod.string().optional(),
  exact: zod.boolean().optional(),
});

export const wordsGetWordsResponse = zod.object({
  words: zod.array(
    zod.object({
      id: zod.number(),
      lemma: zod.string(),
      gloss: zod.string(),
      posCode: zod.enum(["n", "v", "a", "s", "r"]),
      lexFileNum: zod.union([
        zod.literal(0),
        zod.literal(1),
        zod.literal(2),
        zod.literal(3),
        zod.literal(4),
        zod.literal(5),
        zod.literal(6),
        zod.literal(7),
        zod.literal(8),
        zod.literal(9),
        zod.literal(10),
        zod.literal(11),
        zod.literal(12),
        zod.literal(13),
        zod.literal(14),
        zod.literal(15),
        zod.literal(16),
        zod.literal(17),
        zod.literal(18),
        zod.literal(19),
        zod.literal(20),
        zod.literal(21),
        zod.literal(22),
        zod.literal(23),
        zod.literal(24),
        zod.literal(25),
        zod.literal(26),
        zod.literal(27),
        zod.literal(28),
        zod.literal(29),
        zod.literal(30),
        zod.literal(31),
        zod.literal(32),
        zod.literal(33),
        zod.literal(34),
        zod.literal(35),
        zod.literal(36),
        zod.literal(37),
        zod.literal(38),
        zod.literal(39),
        zod.literal(40),
        zod.literal(41),
        zod.literal(42),
        zod.literal(43),
        zod.literal(44),
      ]),
      relations: zod.array(
        zod.object({
          id: zod.number(),
          lemma: zod.string(),
          pointerSymbol: zod.enum([
            "@",
            "@i",
            "~",
            "~i",
            "#m",
            "#s",
            "#p",
            "%m",
            "%s",
            "%p",
            "=",
            "+",
            "!",
            "&",
            "<",
            "*",
            ">",
            "^",
            "$",
            ";c",
            ";r",
            ";u",
            "-c",
            "-r",
            "-u",
            "\\",
          ]),
          sourceTarget: zod.string(),
        }),
      ),
    }),
  ),
  count: zod.number(),
});
